/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as DocumentRouteRouteImport } from './routes/document/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DocumentIndexRouteImport } from './routes/document/index'
import { Route as DocumentNewRouteImport } from './routes/document/new'
import { Route as DocumentIdRouteRouteImport } from './routes/document/$id/route'
import { Route as DocumentIdIndexRouteImport } from './routes/document/$id/index'
import { Route as DocumentIdEditRouteImport } from './routes/document/$id/edit'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentRouteRoute = DocumentRouteRouteImport.update({
  id: '/document',
  path: '/document',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentIndexRoute = DocumentIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocumentRouteRoute,
} as any)
const DocumentNewRoute = DocumentNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => DocumentRouteRoute,
} as any)
const DocumentIdRouteRoute = DocumentIdRouteRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DocumentRouteRoute,
} as any)
const DocumentIdIndexRoute = DocumentIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocumentIdRouteRoute,
} as any)
const DocumentIdEditRoute = DocumentIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => DocumentIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/document': typeof DocumentRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/document/$id': typeof DocumentIdRouteRouteWithChildren
  '/document/new': typeof DocumentNewRoute
  '/document/': typeof DocumentIndexRoute
  '/document/$id/edit': typeof DocumentIdEditRoute
  '/document/$id/': typeof DocumentIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/document/new': typeof DocumentNewRoute
  '/document': typeof DocumentIndexRoute
  '/document/$id/edit': typeof DocumentIdEditRoute
  '/document/$id': typeof DocumentIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/document': typeof DocumentRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/document/$id': typeof DocumentIdRouteRouteWithChildren
  '/document/new': typeof DocumentNewRoute
  '/document/': typeof DocumentIndexRoute
  '/document/$id/edit': typeof DocumentIdEditRoute
  '/document/$id/': typeof DocumentIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/document'
    | '/about'
    | '/document/$id'
    | '/document/new'
    | '/document/'
    | '/document/$id/edit'
    | '/document/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/document/new'
    | '/document'
    | '/document/$id/edit'
    | '/document/$id'
  id:
    | '__root__'
    | '/'
    | '/document'
    | '/about'
    | '/document/$id'
    | '/document/new'
    | '/document/'
    | '/document/$id/edit'
    | '/document/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocumentRouteRoute: typeof DocumentRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/document': {
      id: '/document'
      path: '/document'
      fullPath: '/document'
      preLoaderRoute: typeof DocumentRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/document/': {
      id: '/document/'
      path: '/'
      fullPath: '/document/'
      preLoaderRoute: typeof DocumentIndexRouteImport
      parentRoute: typeof DocumentRouteRoute
    }
    '/document/new': {
      id: '/document/new'
      path: '/new'
      fullPath: '/document/new'
      preLoaderRoute: typeof DocumentNewRouteImport
      parentRoute: typeof DocumentRouteRoute
    }
    '/document/$id': {
      id: '/document/$id'
      path: '/$id'
      fullPath: '/document/$id'
      preLoaderRoute: typeof DocumentIdRouteRouteImport
      parentRoute: typeof DocumentRouteRoute
    }
    '/document/$id/': {
      id: '/document/$id/'
      path: '/'
      fullPath: '/document/$id/'
      preLoaderRoute: typeof DocumentIdIndexRouteImport
      parentRoute: typeof DocumentIdRouteRoute
    }
    '/document/$id/edit': {
      id: '/document/$id/edit'
      path: '/edit'
      fullPath: '/document/$id/edit'
      preLoaderRoute: typeof DocumentIdEditRouteImport
      parentRoute: typeof DocumentIdRouteRoute
    }
  }
}

interface DocumentIdRouteRouteChildren {
  DocumentIdEditRoute: typeof DocumentIdEditRoute
  DocumentIdIndexRoute: typeof DocumentIdIndexRoute
}

const DocumentIdRouteRouteChildren: DocumentIdRouteRouteChildren = {
  DocumentIdEditRoute: DocumentIdEditRoute,
  DocumentIdIndexRoute: DocumentIdIndexRoute,
}

const DocumentIdRouteRouteWithChildren = DocumentIdRouteRoute._addFileChildren(
  DocumentIdRouteRouteChildren,
)

interface DocumentRouteRouteChildren {
  DocumentIdRouteRoute: typeof DocumentIdRouteRouteWithChildren
  DocumentNewRoute: typeof DocumentNewRoute
  DocumentIndexRoute: typeof DocumentIndexRoute
}

const DocumentRouteRouteChildren: DocumentRouteRouteChildren = {
  DocumentIdRouteRoute: DocumentIdRouteRouteWithChildren,
  DocumentNewRoute: DocumentNewRoute,
  DocumentIndexRoute: DocumentIndexRoute,
}

const DocumentRouteRouteWithChildren = DocumentRouteRoute._addFileChildren(
  DocumentRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocumentRouteRoute: DocumentRouteRouteWithChildren,
  AboutRoute: AboutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
